<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CNBaseView.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CNBaseView</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/initWithIcon:text:</TokenIdentifier>
			<Abstract type="html">Creates and return an CNBaseView instance that is displaying the given icon and text.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>- (id)initWithIcon:(NSImage *)icon text:(NSString *)text</Declaration>
			<Parameters>
				<Parameter>
					<Name>icon</Name>
					<Abstract type="html">An NSImage object containing the icon.</Abstract>
				</Parameter><Parameter>
					<Name>text</Name>
					<Abstract type="html">An NSString object containing the text message.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithIcon:text:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/initWithIcon:attributedText:</TokenIdentifier>
			<Abstract type="html">Creates and return an CNBaseView instance that is displaying the given icon and the attributed text.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>- (id)initWithIcon:(NSImage *)icon attributedText:(NSAttributedString *)attributedText</Declaration>
			<Parameters>
				<Parameter>
					<Name>icon</Name>
					<Abstract type="html">An NSImage object containing the icon.</Abstract>
				</Parameter><Parameter>
					<Name>text</Name>
					<Abstract type="html">An NSAttributedString object containing the text message with all the attributes you want.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/initWithIcon:attributedText:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/setIcon:</TokenIdentifier>
			<Abstract type="html">An image that is shown centered of the view.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (strong, nonatomic) NSImage *icon</Declaration>
			
			
			<Anchor>//api/name/icon</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/icon</TokenIdentifier>
			<Abstract type="html">An image that is shown centered of the view.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (strong, nonatomic) NSImage *icon</Declaration>
			
			
			<Anchor>//api/name/icon</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CNBaseView/icon</TokenIdentifier>
			<Abstract type="html">An image that is shown centered of the view.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (strong, nonatomic) NSImage *icon</Declaration>
			
			
			<Anchor>//api/name/icon</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/setText:</TokenIdentifier>
			<Abstract type="html">A string with a message.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (strong, nonatomic) NSString *text</Declaration>
			
			
			<Anchor>//api/name/text</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/text</TokenIdentifier>
			<Abstract type="html">A string with a message.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (strong, nonatomic) NSString *text</Declaration>
			
			
			<Anchor>//api/name/text</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CNBaseView/text</TokenIdentifier>
			<Abstract type="html">A string with a message.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (strong, nonatomic) NSString *text</Declaration>
			
			
			<Anchor>//api/name/text</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/setAttributedText:</TokenIdentifier>
			<Abstract type="html">An attributed string with a message.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (strong, nonatomic) NSAttributedString *attributedText</Declaration>
			
			
			<Anchor>//api/name/attributedText</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/attributedText</TokenIdentifier>
			<Abstract type="html">An attributed string with a message.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (strong, nonatomic) NSAttributedString *attributedText</Declaration>
			
			
			<Anchor>//api/name/attributedText</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CNBaseView/attributedText</TokenIdentifier>
			<Abstract type="html">An attributed string with a message.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (strong, nonatomic) NSAttributedString *attributedText</Declaration>
			
			
			<Anchor>//api/name/attributedText</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/setTextBoxWidth:</TokenIdentifier>
			<Abstract type="html">Float value to define the width of the text box rectangle.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) CGFloat textBoxWidth</Declaration>
			
			
			<Anchor>//api/name/textBoxWidth</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/textBoxWidth</TokenIdentifier>
			<Abstract type="html">Float value to define the width of the text box rectangle.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) CGFloat textBoxWidth</Declaration>
			
			
			<Anchor>//api/name/textBoxWidth</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CNBaseView/textBoxWidth</TokenIdentifier>
			<Abstract type="html">Float value to define the width of the text box rectangle.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) CGFloat textBoxWidth</Declaration>
			
			
			<Anchor>//api/name/textBoxWidth</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/setIconVerticalOffset:</TokenIdentifier>
			<Abstract type="html">Float value to define a vertical offset for the icons view point.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) CGFloat iconVerticalOffset</Declaration>
			
			
			<Anchor>//api/name/iconVerticalOffset</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/iconVerticalOffset</TokenIdentifier>
			<Abstract type="html">Float value to define a vertical offset for the icons view point.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) CGFloat iconVerticalOffset</Declaration>
			
			
			<Anchor>//api/name/iconVerticalOffset</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CNBaseView/iconVerticalOffset</TokenIdentifier>
			<Abstract type="html">Float value to define a vertical offset for the icons view point.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) CGFloat iconVerticalOffset</Declaration>
			
			
			<Anchor>//api/name/iconVerticalOffset</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/setIconTextMargin:</TokenIdentifier>
			<Abstract type="html">Float value to define the distance between icon and text message.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) CGFloat iconTextMargin</Declaration>
			
			
			<Anchor>//api/name/iconTextMargin</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/iconTextMargin</TokenIdentifier>
			<Abstract type="html">Float value to define the distance between icon and text message.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) CGFloat iconTextMargin</Declaration>
			
			
			<Anchor>//api/name/iconTextMargin</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CNBaseView/iconTextMargin</TokenIdentifier>
			<Abstract type="html">Float value to define the distance between icon and text message.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) CGFloat iconTextMargin</Declaration>
			
			
			<Anchor>//api/name/iconTextMargin</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/setPreventDrawingWithSubviews:</TokenIdentifier>
			<Abstract type="html">Property with a boolean value that indicates whether CNBaseView should draw an icon and text if there are subviews present or not.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign) BOOL preventDrawingWithSubviews</Declaration>
			<Parameters>
				<Parameter>
					<Name>preventDrawingWithSubviews</Name>
					<Abstract type="html">YES (default value) will stop drawing the icon and text if there are subviews available. NO will always draw the icon and text.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/preventDrawingWithSubviews</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/preventDrawingWithSubviews</TokenIdentifier>
			<Abstract type="html">Property with a boolean value that indicates whether CNBaseView should draw an icon and text if there are subviews present or not.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign) BOOL preventDrawingWithSubviews</Declaration>
			<Parameters>
				<Parameter>
					<Name>preventDrawingWithSubviews</Name>
					<Abstract type="html">YES (default value) will stop drawing the icon and text if there are subviews available. NO will always draw the icon and text.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/preventDrawingWithSubviews</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CNBaseView/preventDrawingWithSubviews</TokenIdentifier>
			<Abstract type="html">Property with a boolean value that indicates whether CNBaseView should draw an icon and text if there are subviews present or not.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign) BOOL preventDrawingWithSubviews</Declaration>
			<Parameters>
				<Parameter>
					<Name>preventDrawingWithSubviews</Name>
					<Abstract type="html">YES (default value) will stop drawing the icon and text if there are subviews available. NO will always draw the icon and text.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/preventDrawingWithSubviews</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/setBackgroundColor:</TokenIdentifier>
			<Abstract type="html">Property to set the backgroundcolor of the view.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) NSColor *backgroundColor</Declaration>
			
			
			<Anchor>//api/name/backgroundColor</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/backgroundColor</TokenIdentifier>
			<Abstract type="html">Property to set the backgroundcolor of the view.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) NSColor *backgroundColor</Declaration>
			
			
			<Anchor>//api/name/backgroundColor</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CNBaseView/backgroundColor</TokenIdentifier>
			<Abstract type="html">Property to set the backgroundcolor of the view.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>@property (assign, nonatomic) NSColor *backgroundColor</Declaration>
			
			
			<Anchor>//api/name/backgroundColor</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/pushChildView:withAnimationEffect:usingCompletionHandler:</TokenIdentifier>
			<Abstract type="html">Pushs in another view as subview using the defined animation effect.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>- (void)pushChildView:(NSView *)childView withAnimationEffect:(CNChildViewAnimationEffect)effect usingCompletionHandler:(void ( ^ ) ( void ))completionHandler</Declaration>
			
			
			<Anchor>//api/name/pushChildView:withAnimationEffect:usingCompletionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/pushChildView:withAnimationEffect:duration:usingCompletionHandler:</TokenIdentifier>
			<Abstract type="html">Pushs in another view as subview using the defined animation effect with a given animation duration.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>- (void)pushChildView:(NSView *)childView withAnimationEffect:(CNChildViewAnimationEffect)effect duration:(CGFloat)duration usingCompletionHandler:(void ( ^ ) ( void ))completionHandler</Declaration>
			
			
			<Anchor>//api/name/pushChildView:withAnimationEffect:duration:usingCompletionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/popChildViewWithAnimationEffect:usingCompletionHandler:</TokenIdentifier>
			<Abstract type="html">Pops the child view and updates the display.</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>- (void)popChildViewWithAnimationEffect:(CNChildViewAnimationEffect)effect usingCompletionHandler:(void ( ^ ) ( void ))completionHandler</Declaration>
			
			
			<Anchor>//api/name/popChildViewWithAnimationEffect:usingCompletionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CNBaseView/popChildViewWithAnimationEffect:duration:usingCompletionHandler:</TokenIdentifier>
			<Abstract type="html">Pops the child view and updates the display using a given animation duration</Abstract>
			<DeclaredIn>CNBaseView.h</DeclaredIn>			
			
			<Declaration>- (void)popChildViewWithAnimationEffect:(CNChildViewAnimationEffect)effect duration:(CGFloat)duration usingCompletionHandler:(void ( ^ ) ( void ))completionHandler</Declaration>
			
			
			<Anchor>//api/name/popChildViewWithAnimationEffect:duration:usingCompletionHandler:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
	</File>
</Tokens>